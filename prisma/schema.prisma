// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("DATABASE_SHADOW_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  events   Event[]
  fields   Field[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  link        String   @unique
  description String   @db.MediumText()
  imageUrl    String?
  date        DateTime

  users  User[]
  guests Guest[]
  fields FieldsOnEvents[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FieldType {
  TEXT
  OPTION
  NUMBER
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model Field {
  id          String     @id @default(cuid())
  name        String
  description String
  type        FieldType  @default(TEXT)
  visibility  Visibility @default(PUBLIC)

  options FieldOption[]
  events  FieldsOnEvents[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  archivedAt DateTime?
}

model FieldOption {
  id          String @id @default(cuid())
  name        String
  description String

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fieldId String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  archivedAt DateTime?
}

model FieldsOnEvents {
  id String @id @default(cuid())

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fieldId String
}

model FieldsOnGuests {
  id    String @id @default(cuid())
  value String

  guests Guest[]
}

enum GuestConfirmation {
  YES
  NO
  MAYBE
}

model Guest {
  id           String            @id @default(cuid())
  confirmation GuestConfirmation @default(YES)

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  fields FieldsOnGuests[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
